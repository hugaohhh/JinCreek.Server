// <auto-generated />
using System;
using JinCreek.Server.Common.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JinCreek.Server.Common.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20200110094028_mdbOne")]
    partial class mdbOne
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("JinCreek.Server.Common.Models.AdDeviceSettingOfflineWindowsSignIn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AdDeviceId")
                        .HasColumnType("char(36)");

                    b.Property<int>("WindowsSignInListCacheDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdDeviceId")
                        .IsUnique();

                    b.ToTable("AdDeviceSettingOfflineWindowsSignIn");
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.AuthenticationLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ConnectionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("AuthenticationLog");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AuthenticationLog");
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.AuthenticationState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("TimeLimit")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("AuthenticationState");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AuthenticationState");
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DeviceGroupId")
                        .HasColumnType("char(36)");

                    b.Property<string>("DeviceImei")
                        .IsRequired()
                        .HasColumnType("LONGTEXT BINARY");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("LONGTEXT BINARY");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("LteId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ManagerNumber")
                        .IsRequired()
                        .HasColumnType("LONGTEXT BINARY");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("LONGTEXT BINARY");

                    b.HasKey("Id");

                    b.HasIndex("DeviceGroupId");

                    b.HasIndex("LteId");

                    b.ToTable("Device");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Device");
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.DeviceGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("OsType")
                        .IsRequired()
                        .HasColumnType("LONGTEXT BINARY");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("LONGTEXT BINARY");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("DeviceGroup");
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.Domain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasColumnType("LONGTEXT BINARY");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Domain");
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.FactorCombination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("EndDay")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EndUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("NwAddress")
                        .IsRequired()
                        .HasColumnType("LONGTEXT BINARY");

                    b.Property<Guid>("SimDeviceId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("StartDay")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("EndUserId");

                    b.HasIndex("SimDeviceId");

                    b.ToTable("FactorCombination");
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.Lte", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("LteAdapter")
                        .IsRequired()
                        .HasColumnType("LONGTEXT BINARY");

                    b.Property<string>("LteName")
                        .IsRequired()
                        .HasColumnType("LONGTEXT BINARY");

                    b.Property<bool>("SoftwareRadioState")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Lte");
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("LONGTEXT BINARY");

                    b.Property<string>("AdminMail")
                        .IsRequired()
                        .HasColumnType("LONGTEXT BINARY");

                    b.Property<string>("AdminPhone")
                        .IsRequired()
                        .HasColumnType("LONGTEXT BINARY");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255) BINARY");

                    b.Property<string>("DelegatePhone")
                        .IsRequired()
                        .HasColumnType("LONGTEXT BINARY");

                    b.Property<DateTime>("EndDay")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsValid")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("LONGTEXT BINARY");

                    b.Property<DateTime>("StartDay")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("LONGTEXT BINARY");

                    b.HasKey("Id");

                    b.HasAlternateKey("Code")
                        .HasName("Organization_Code_UQ");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.Sim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("IccId")
                        .IsRequired()
                        .HasColumnType("LONGTEXT BINARY");

                    b.Property<string>("Imsi")
                        .IsRequired()
                        .HasColumnType("LONGTEXT BINARY");

                    b.Property<string>("Msisdn")
                        .IsRequired()
                        .HasColumnType("LONGTEXT BINARY");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("LONGTEXT BINARY");

                    b.Property<Guid>("SimGroupId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("LONGTEXT BINARY");

                    b.HasKey("Id");

                    b.HasIndex("SimGroupId");

                    b.ToTable("Sim");
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.SimDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AuthPeriod")
                        .HasColumnType("int");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("EndDay")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nw2AddressPool")
                        .IsRequired()
                        .HasColumnType("LONGTEXT BINARY");

                    b.Property<Guid>("SimId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("StartDay")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId")
                        .IsUnique();

                    b.HasIndex("SimId")
                        .IsUnique();

                    b.ToTable("SimDevice");
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.SimGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Apn")
                        .IsRequired()
                        .HasColumnType("LONGTEXT BINARY");

                    b.Property<string>("NasAddress")
                        .IsRequired()
                        .HasColumnType("LONGTEXT BINARY");

                    b.Property<string>("Nw1AddressPool")
                        .IsRequired()
                        .HasColumnType("LONGTEXT BINARY");

                    b.Property<string>("Nw1AddressRange")
                        .IsRequired()
                        .HasColumnType("LONGTEXT BINARY");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PrimaryDns")
                        .IsRequired()
                        .HasColumnType("LONGTEXT BINARY");

                    b.Property<string>("SecondDns")
                        .IsRequired()
                        .HasColumnType("LONGTEXT BINARY");

                    b.Property<string>("ServerAddress")
                        .IsRequired()
                        .HasColumnType("LONGTEXT BINARY");

                    b.Property<string>("SimGroupName")
                        .IsRequired()
                        .HasColumnType("LONGTEXT BINARY");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("SimGroup");
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .HasColumnType("LONGTEXT BINARY");

                    b.Property<string>("LastName")
                        .HasColumnType("LONGTEXT BINARY");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasAlternateKey("AccountName")
                        .HasName("User_AccountName_UQ");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("UserType").HasValue("User");
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DomainId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserGroupName")
                        .IsRequired()
                        .HasColumnType("LONGTEXT BINARY");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.ToTable("UserGroup");
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.Deauthentication", b =>
                {
                    b.HasBaseType("JinCreek.Server.Common.Models.AuthenticationLog");

                    b.Property<Guid>("FactorCombinationId")
                        .HasColumnType("char(36)");

                    b.HasIndex("FactorCombinationId");

                    b.HasDiscriminator().HasValue("Deauthentication");
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.MultiFactorAuthenticationLogFail", b =>
                {
                    b.HasBaseType("JinCreek.Server.Common.Models.AuthenticationLog");

                    b.Property<Guid>("SimDeviceId")
                        .HasColumnType("char(36)");

                    b.HasIndex("SimDeviceId");

                    b.HasDiscriminator().HasValue("MultiFactorAuthenticationLogFail");
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.MultiFactorAuthenticationLogSuccess", b =>
                {
                    b.HasBaseType("JinCreek.Server.Common.Models.AuthenticationLog");

                    b.Property<Guid>("FactorCombinationId")
                        .HasColumnName("MultiFactorAuthenticationLogSuccess_FactorCombinationId")
                        .HasColumnType("char(36)");

                    b.HasIndex("FactorCombinationId");

                    b.HasDiscriminator().HasValue("MultiFactorAuthenticationLogSuccess");
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.SimDeviceAuthenticationLogFail", b =>
                {
                    b.HasBaseType("JinCreek.Server.Common.Models.AuthenticationLog");

                    b.Property<Guid>("SimId")
                        .HasColumnType("char(36)");

                    b.HasIndex("SimId");

                    b.HasDiscriminator().HasValue("SimDeviceAuthenticationLogFail");
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.SimDeviceAuthenticationLogSuccess", b =>
                {
                    b.HasBaseType("JinCreek.Server.Common.Models.AuthenticationLog");

                    b.Property<Guid>("SimDeviceId")
                        .HasColumnName("SimDeviceAuthenticationLogSuccess_SimDeviceId")
                        .HasColumnType("char(36)");

                    b.HasIndex("SimDeviceId");

                    b.HasDiscriminator().HasValue("SimDeviceAuthenticationLogSuccess");
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.MultiFactorAuthenticationStateDone", b =>
                {
                    b.HasBaseType("JinCreek.Server.Common.Models.AuthenticationState");

                    b.Property<Guid>("FactorCombinationId")
                        .HasColumnType("char(36)");

                    b.HasIndex("FactorCombinationId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("MultiFactorAuthenticationStateDone");
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.SimDeviceAuthenticationStateDone", b =>
                {
                    b.HasBaseType("JinCreek.Server.Common.Models.AuthenticationState");

                    b.Property<Guid>("SimDeviceId")
                        .HasColumnType("char(36)");

                    b.HasIndex("SimDeviceId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("SimDeviceAuthenticationStateDone");
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.AdDevice", b =>
                {
                    b.HasBaseType("JinCreek.Server.Common.Models.Device");

                    b.Property<Guid>("DomainId")
                        .HasColumnType("char(36)");

                    b.HasIndex("DomainId");

                    b.HasDiscriminator().HasValue("AdDevice");
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.EndUser", b =>
                {
                    b.HasBaseType("JinCreek.Server.Common.Models.User");

                    b.Property<Guid>("DomainId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDisconnectWhenScreenLock")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("UserGroupId")
                        .HasColumnType("char(36)");

                    b.HasIndex("DomainId");

                    b.HasIndex("UserGroupId");

                    b.HasDiscriminator().HasValue("EndUser");
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.SuperAdminUser", b =>
                {
                    b.HasBaseType("JinCreek.Server.Common.Models.User");

                    b.Property<string>("Password")
                        .HasColumnName("SuperAdminUser_Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasDiscriminator().HasValue("superAdmin");
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.AdminUser", b =>
                {
                    b.HasBaseType("JinCreek.Server.Common.Models.EndUser");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasDiscriminator().HasValue("admin");
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.GeneralUser", b =>
                {
                    b.HasBaseType("JinCreek.Server.Common.Models.EndUser");

                    b.HasDiscriminator().HasValue("general");
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.AdDeviceSettingOfflineWindowsSignIn", b =>
                {
                    b.HasOne("JinCreek.Server.Common.Models.AdDevice", "AdDevice")
                        .WithOne("AdDeviceSettingOfflineWindowsSignIn")
                        .HasForeignKey("JinCreek.Server.Common.Models.AdDeviceSettingOfflineWindowsSignIn", "AdDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.Device", b =>
                {
                    b.HasOne("JinCreek.Server.Common.Models.DeviceGroup", "DeviceGroup")
                        .WithMany("Devices")
                        .HasForeignKey("DeviceGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JinCreek.Server.Common.Models.Lte", "Lte")
                        .WithMany("Devices")
                        .HasForeignKey("LteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.DeviceGroup", b =>
                {
                    b.HasOne("JinCreek.Server.Common.Models.Organization", "Organization")
                        .WithMany("DeviceGroups")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.Domain", b =>
                {
                    b.HasOne("JinCreek.Server.Common.Models.Organization", "Organization")
                        .WithMany("Domains")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.FactorCombination", b =>
                {
                    b.HasOne("JinCreek.Server.Common.Models.EndUser", "EndUser")
                        .WithMany("FactorCombinations")
                        .HasForeignKey("EndUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JinCreek.Server.Common.Models.SimDevice", "SimDevice")
                        .WithMany("FactorCombinations")
                        .HasForeignKey("SimDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.Sim", b =>
                {
                    b.HasOne("JinCreek.Server.Common.Models.SimGroup", "SimGroup")
                        .WithMany("Sims")
                        .HasForeignKey("SimGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.SimDevice", b =>
                {
                    b.HasOne("JinCreek.Server.Common.Models.Device", "Device")
                        .WithOne("SimDevice")
                        .HasForeignKey("JinCreek.Server.Common.Models.SimDevice", "DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JinCreek.Server.Common.Models.Sim", "Sim")
                        .WithOne("SimDevice")
                        .HasForeignKey("JinCreek.Server.Common.Models.SimDevice", "SimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.SimGroup", b =>
                {
                    b.HasOne("JinCreek.Server.Common.Models.Organization", "Organization")
                        .WithMany("SimGroups")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.UserGroup", b =>
                {
                    b.HasOne("JinCreek.Server.Common.Models.Domain", "Domain")
                        .WithMany("UserGroups")
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.Deauthentication", b =>
                {
                    b.HasOne("JinCreek.Server.Common.Models.FactorCombination", "FactorCombination")
                        .WithMany("Deauthentications")
                        .HasForeignKey("FactorCombinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.MultiFactorAuthenticationLogFail", b =>
                {
                    b.HasOne("JinCreek.Server.Common.Models.SimDevice", "SimDevice")
                        .WithMany("MultiFactorAuthenticationLogFails")
                        .HasForeignKey("SimDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.MultiFactorAuthenticationLogSuccess", b =>
                {
                    b.HasOne("JinCreek.Server.Common.Models.FactorCombination", "FactorCombination")
                        .WithMany("MultiFactorAuthenticationLogSuccesses")
                        .HasForeignKey("FactorCombinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.SimDeviceAuthenticationLogFail", b =>
                {
                    b.HasOne("JinCreek.Server.Common.Models.Sim", "Sim")
                        .WithMany("SimDeviceAuthenticationLogFails")
                        .HasForeignKey("SimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.SimDeviceAuthenticationLogSuccess", b =>
                {
                    b.HasOne("JinCreek.Server.Common.Models.SimDevice", "SimDevice")
                        .WithMany("SimDeviceAuthenticationLogSuccesses")
                        .HasForeignKey("SimDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.MultiFactorAuthenticationStateDone", b =>
                {
                    b.HasOne("JinCreek.Server.Common.Models.FactorCombination", "FactorCombination")
                        .WithOne("MultiFactorAuthenticationStateDone")
                        .HasForeignKey("JinCreek.Server.Common.Models.MultiFactorAuthenticationStateDone", "FactorCombinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.SimDeviceAuthenticationStateDone", b =>
                {
                    b.HasOne("JinCreek.Server.Common.Models.SimDevice", "SimDevice")
                        .WithOne("SimDeviceAuthenticationStateDone")
                        .HasForeignKey("JinCreek.Server.Common.Models.SimDeviceAuthenticationStateDone", "SimDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.AdDevice", b =>
                {
                    b.HasOne("JinCreek.Server.Common.Models.Domain", "Domain")
                        .WithMany("AdDevices")
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JinCreek.Server.Common.Models.EndUser", b =>
                {
                    b.HasOne("JinCreek.Server.Common.Models.Domain", "Domain")
                        .WithMany("EndUsers")
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JinCreek.Server.Common.Models.UserGroup", "UserGroup")
                        .WithMany("EndUsers")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
